package ipana.modules.exploit;

import ipana.events.EventPacketReceive;
import ipana.events.EventPostUpdate;
import ipana.events.EventPreUpdate;
import ipana.managements.module.Modules;
import ipana.managements.value.values.EnumValue;
import ipana.managements.value.values.NumberValue;
import ipana.modules.combat.KillAura;
import ipana.modules.combat.modes.killaura.Single;
import ipana.modules.combat.modes.killaura.TickMode;
import ipana.modules.movement.Speed;
import ipana.modules.movement.modes.speed.OldNCP;
import ipana.utils.FutureTick;
import ipana.utils.player.PlayerUtils;
import ipana.managements.module.Category;
import ipana.managements.module.Module;
import net.minecraft.client.Minecraft;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.client.C09PacketHeldItemChange;
import net.minecraft.network.play.client.C0EPacketClickWindow;
import net.minecraft.network.play.server.S02PacketChat;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S38PacketPlayerListItem;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import org.lwjgl.input.Keyboard;

import pisi.unitedmeows.eventapi.event.Event;
import pisi.unitedmeows.eventapi.event.listener.Listener;

import java.util.List;

public class GodMode extends Module {
    public EnumValue<Mode> mode = new EnumValue<>("Mode", this, Mode.class, "GodMode modes.");
    public NumberValue<Integer> health = new NumberValue<>("Health", this, 12, 1, 20, 1, "Health to regen back.");
    private boolean waiting;

    public GodMode() {
        super("GodMode", Keyboard.KEY_NONE,Category.Exploit,"Anan");
    }

    @Override
    public void onEnable() {
        waiting = false;
        super.onEnable();
        if (mc.thePlayer != null && mode.getValue() == Mode.EfsaneCraft) {
            mc.thePlayer.sendChatMessage("/mg katıl sg");
            mc.thePlayer.sendChatMessage("/mg çık");
            toggle();
        }
    }

    private Listener<EventPostUpdate> onPost = new Listener<EventPostUpdate>(event -> {
        switch (mode.getValue()) {
            case Revive -> {
                //hurttime check can be added
                KillAura ka = Modules.KILL_AURA;
                Speed speed = Modules.SPEED;
                boolean oldNCP = speed.isEnabled() && PlayerUtils.isMoving2() && speed.mode.getValue() instanceof OldNCP;
                boolean singleAura = ka.mode.getValue() instanceof Single && (oldNCP ? speed.ticks == 0 : ka.hit);
                boolean tickAura = ka.mode.getValue() instanceof TickMode tickMode && (oldNCP ? speed.ticks == 0 : tickMode.ticks >= 4);
                boolean kaCheck = !ka.isEnabled() || ka.targets.isEmpty() || singleAura || tickAura;
                boolean groundCheck = mc.thePlayer.onGround || mc.thePlayer.prevPosY > mc.thePlayer.posY;

                if (mc.thePlayer.getHealth() <= health.getValue() && kaCheck && (!oldNCP || speed.ticks == 0) && groundCheck) {
                    EventPreUpdate pre = event.lastEvent();
                    PlayerUtils.send(pre.getX(), pre.getY()+0.07, pre.getZ());
                    PlayerUtils.send(pre.getX(), -1000, pre.getZ(), true);
                    BlockPos spawnPos = mc.theWorld.getSpawnPoint().down(10); //idk why it offsets 10 to up
                    PlayerUtils.cancelFlag(spawnPos.getX(), spawnPos.getY(), spawnPos.getZ(), false, false);
                    PlayerUtils.cancelFlag(mc.thePlayer.posX, oldNCP ? pre.getY() : mc.thePlayer.posY, mc.thePlayer.posZ, true);
                    if (oldNCP) {
                        AxisAlignedBB bb = PlayerUtils.getBBFromXYZ(pre.getX(), pre.getY()-0.0625, pre.getZ());
                        if (bb != null) {
                            mc.thePlayer.setPosition(pre.getX(), bb.maxY, pre.getZ());
                        }
                    }
                    mc.thePlayer.setHealth(mc.thePlayer.getMaxHealth());
                }
            }
            case Kick -> {
                if ((mc.thePlayer.getHealth() <= health.getValue() || mc.thePlayer.posY < 2) && !waiting) {
                    PlayerUtils.packet(new C02PacketUseEntity(mc.thePlayer, C02PacketUseEntity.Action.ATTACK));
                    waiting = true;
                }
            }
        }
    }).weight(Event.Weight.SLAVE);

    private Listener<EventPacketReceive> receive = new Listener<>(event -> {
        if (event.getState() == EventPacketReceive.PacketState.PRE) {
            if (waiting && event.getPacket() instanceof S38PacketPlayerListItem) {
                PlayerUtils.debug("Re logging...");
                PlayerUtils.packet(new C09PacketHeldItemChange(0));
                PlayerUtils.packet(new C08PacketPlayerBlockPlacement(null));
                FutureTick.addFuture(2, () -> PlayerUtils.packet(new C0EPacketClickWindow(4, 26, 0, 0, new ItemStack(Items.bow), (short) 1)));

                waiting = false;
                toggle();
            }
        }
    });

    enum Mode {
        Kick, Revive, EfsaneCraft
    }
}
