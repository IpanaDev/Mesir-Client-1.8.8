package ipana.modules.exploit;

import ipana.events.EventFrame;
import ipana.managements.value.values.NumberValue;
import net.minecraft.network.play.client.C03PacketPlayer;
import ipana.events.EventPacketReceive;
import ipana.events.EventPacketSend;
import ipana.events.EventPostUpdate;
import ipana.managements.module.Category;
import ipana.managements.module.Module;
import ipana.managements.value.Value;
import ipana.utils.player.PlayerUtils;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S38PacketPlayerListItem;
import net.minecraft.util.ChatComponentText;
import org.lwjgl.input.Keyboard;

import pisi.unitedmeows.eventapi.event.listener.Listener;

import java.util.ArrayList;
import java.util.List;

public class PingSpoof extends Module {
    public PingSpoof() {
        super("PingSpoof", Keyboard.KEY_NONE,Category.Exploit,"Set your ping to 0.");
    }
    private int ticks;
    private List<Key> packets = new ArrayList<>();
    private int lastKey;
    private long ms;
    private NumberValue<Integer> targetMs = new NumberValue<>("TargetMS",this,2173,0,3000,15,"Target player ms.");
    private NumberValue<Integer> increase = new NumberValue<>("Increase",this,2173,0,3000,15,"increase amount of player ms.");


    @Override
    public void onEnable() {
        ticks = 0;
        packets.clear();
        super.onEnable();
    }

    @Override
    public void onDisable() {
        super.onDisable();
    }


    private Listener<EventFrame> onFrame = new Listener<EventFrame>(event -> {
        PlayerUtils.packet(new C00PacketKeepAlive(packets.get(0).key.id));
        packets.remove(0);
    }).filter(filter -> packets.size() > 0 && System.currentTimeMillis() - packets.get(0).ms >= increase.getValue());


    private Listener<EventPacketSend> onSend = new Listener<EventPacketSend>(event -> {

        int responseTime = mc.getNetHandler().getPlayerInfo(mc.thePlayer.getUniqueID()).responseTime;
        if (ms != responseTime) {
            ms = responseTime;
            onSuffixChange();
        }
        if (mc.getNetHandler().getPlayerInfo(mc.thePlayer.getUniqueID()).responseTime == targetMs.getValue()) {
            event.setCancelled(true);
        }
    }).filter(filter -> (filter.getPacket() instanceof C00PacketKeepAlive&& mc.thePlayer != null && (!mc.thePlayer.isDead || mc.thePlayer.getHealth() > 0) && mc.getNetHandler().getPlayerInfo(mc.thePlayer.getUniqueID()) != null ));

    private Listener<EventPacketReceive> onReceive = new Listener<EventPacketReceive>(event -> {
        S00PacketKeepAlive keepAlive = (S00PacketKeepAlive)event.getPacket();
        event.setCancelled(true);
        packets.add(new Key(keepAlive,System.currentTimeMillis()));
    }).filter(filter -> (filter.getPacket() instanceof S00PacketKeepAlive && mc.thePlayer != null && (!mc.thePlayer.isDead || mc.thePlayer.getHealth() > 0)));

    @Override
    public void onSuffixChange() {
        if (mc.thePlayer != null) {
            setSuffix("" + ms);
        }
        super.onSuffixChange();
    }

    class Key {
        public S00PacketKeepAlive key;
        public long ms;

        public Key(S00PacketKeepAlive key, long ms) {
            this.key = key;
            this.ms = ms;
        }
    }
}
