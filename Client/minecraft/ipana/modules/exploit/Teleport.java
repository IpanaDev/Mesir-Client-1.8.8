package ipana.modules.exploit;

import ipana.Ipana;
import ipana.managements.value.values.EnumValue;
import ipana.modules.combat.TpAura;
import net.minecraft.util.MathHelper;
import ipana.events.*;
import ipana.managements.module.Category;
import ipana.managements.module.Module;
import ipana.managements.value.Value;
import ipana.managements.value.values.ModeValue;
import ipana.managements.value.values.NumberValue;
import ipana.utils.Timer;
import ipana.utils.player.PlayerUtils;
import net.minecraft.block.BlockAir;
import net.minecraft.block.BlockLiquid;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.WorldRenderer;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.BlockPos;
import net.minecraft.util.Vec3;
import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;

import pisi.unitedmeows.eventapi.event.listener.Listener;

import java.util.ArrayList;
import java.util.List;

import static ipana.utils.player.PlayerUtils.*;

public class Teleport extends Module {

    EnumValue<TpMode> mode = new EnumValue<>("Mode",this, TpMode.class,"Teleport methods.");

    public Teleport() {
        super("Teleport", Keyboard.KEY_NONE,Category.Exploit,"Teleports to mouse over.");
    }

    private List<Vec3> list = new ArrayList<>();

    @Override
    public void onSuffixChange() {
        setSuffix(mode.getValue().name());
        super.onSuffixChange();
    }

    private Listener<EventMouse> onMouse = new Listener<EventMouse>(event -> {
        double posX = mc.objectMouseOver.hitVec.xCoord;
        double posY = mc.objectMouseOver.hitVec.yCoord;
        double posZ = mc.objectMouseOver.hitVec.zCoord;
        switch (mode.getValue()) {
            case NCP -> {
                list.clear();
                mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 0.2, mc.thePlayer.posZ, false));
                double base = getBaseMoveSpeed();
                double dist = mc.thePlayer.getDistance(posX, posY, posZ);
                for (double x = 0; x < dist; x += base) {
                    double[] c = calculate2(base, mc.thePlayer.rotationYaw, 1);
                    double dX = c[0];
                    double dY = Math.sin(-mc.thePlayer.rotationPitch) * base;
                    double dZ = c[1];
                    if (mc.thePlayer.posY == posY) {
                        dY = 0;
                    }
                    mc.thePlayer.expandPos(dX, dY, dZ);
                    PlayerUtils.sendOffset(0, 0, 0);
                    list.add(new Vec3(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ));
                }
            }
            case Vanilla -> {
                mc.thePlayer.setPosition(posX, posY, posZ);
                PlayerUtils.sendOffset(0, 0, 0);
            }
        }
    }).filter(filter -> filter.getKey() == 1);

    private Listener<EventRender3D> onRender3D = new Listener<>(event -> {
        for (Vec3 point : list) {
            double posX = point.xCoord - mc.getRenderManager().renderPosX;
            double posY = point.yCoord - mc.getRenderManager().renderPosY;
            double posZ = point.zCoord - mc.getRenderManager().renderPosZ;
            GlStateManager.pushMatrix();
            GlStateManager.enableBlend();
            GL11.glLineWidth(1.0F);
            GlStateManager.disableTexture2D();
            GlStateManager.disableDepth();
            GlStateManager.depthMask(false);
            AxisAlignedBB bb = new AxisAlignedBB(posX - 1, posY, posZ - 1, posX, posY + 2, posZ);
            drawOutlineBox(bb);
            GlStateManager.depthMask(true);
            GlStateManager.enableDepth();
            GlStateManager.enableTexture2D();
            GlStateManager.disableBlend();
            GlStateManager.popMatrix();
        }
    });

    private void drawOutlineBox(AxisAlignedBB p_181561_0_)
    {
        Tessellator tessellator = Tessellator.getInstance();
        WorldRenderer worldrenderer = tessellator.getWorldRenderer();
        GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
        GlStateManager.color((float) Ipana.getClientColor().getRed()/255, (float)Ipana.getClientColor().getGreen()/255, (float)Ipana.getClientColor().getBlue()/255, 1);
        worldrenderer.begin(3, DefaultVertexFormats.POSITION);
        worldrenderer.pos(p_181561_0_.minX, p_181561_0_.minY, p_181561_0_.minZ).endVertex();
        worldrenderer.pos(p_181561_0_.maxX, p_181561_0_.minY, p_181561_0_.minZ).endVertex();
        worldrenderer.pos(p_181561_0_.maxX, p_181561_0_.minY, p_181561_0_.maxZ).endVertex();
        worldrenderer.pos(p_181561_0_.minX, p_181561_0_.minY, p_181561_0_.maxZ).endVertex();
        worldrenderer.pos(p_181561_0_.minX, p_181561_0_.minY, p_181561_0_.minZ).endVertex();
        tessellator.draw();
        worldrenderer.begin(3, DefaultVertexFormats.POSITION);
        worldrenderer.pos(p_181561_0_.minX, p_181561_0_.maxY, p_181561_0_.minZ).endVertex();
        worldrenderer.pos(p_181561_0_.maxX, p_181561_0_.maxY, p_181561_0_.minZ).endVertex();
        worldrenderer.pos(p_181561_0_.maxX, p_181561_0_.maxY, p_181561_0_.maxZ).endVertex();
        worldrenderer.pos(p_181561_0_.minX, p_181561_0_.maxY, p_181561_0_.maxZ).endVertex();
        worldrenderer.pos(p_181561_0_.minX, p_181561_0_.maxY, p_181561_0_.minZ).endVertex();
        tessellator.draw();
        worldrenderer.begin(1, DefaultVertexFormats.POSITION);
        worldrenderer.pos(p_181561_0_.minX, p_181561_0_.minY, p_181561_0_.minZ).endVertex();
        worldrenderer.pos(p_181561_0_.minX, p_181561_0_.maxY, p_181561_0_.minZ).endVertex();
        worldrenderer.pos(p_181561_0_.maxX, p_181561_0_.minY, p_181561_0_.minZ).endVertex();
        worldrenderer.pos(p_181561_0_.maxX, p_181561_0_.maxY, p_181561_0_.minZ).endVertex();
        worldrenderer.pos(p_181561_0_.maxX, p_181561_0_.minY, p_181561_0_.maxZ).endVertex();
        worldrenderer.pos(p_181561_0_.maxX, p_181561_0_.maxY, p_181561_0_.maxZ).endVertex();
        worldrenderer.pos(p_181561_0_.minX, p_181561_0_.minY, p_181561_0_.maxZ).endVertex();
        worldrenderer.pos(p_181561_0_.minX, p_181561_0_.maxY, p_181561_0_.maxZ).endVertex();
        tessellator.draw();
    }

    @Override
    public void onDisable() {
        list.clear();
        super.onDisable();
    }

    @Override
    public void onEnable() {
        super.onEnable();
    }

    enum TpMode{
        Vanilla, NCP
    }
}
